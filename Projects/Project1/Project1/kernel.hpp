////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Author: Jarret Shook
//
// Module: kernel.hpp
//
// Modifications:
//
// 25-July-13: Version 1.0: Last Updated
// 25-July-13: Version 1.0: Created
//
// Timeperiod: ev7n
//
// Notes:
//
//    To compile: g++ -i include/ *.cpp
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef __KERNEL_HPP__
#define __KERNEL_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include <vector>

#include "base.hpp"
#include "frame.hpp"
#include "process.hpp"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace el {
namespace ev7n {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template <std::size_t __Size> class kernel
{

   private:   // Member Variables

      static int _m_frames[__Size == 0 ? 1 : __Size]; 
      static std::vector< process<frame, _s_min_cycles, _s_max_cycles>* > _m_processes;

   public:   // Member Functions

      void allocate_frame() { _allocate_frame(); }
      static void interupt() { _interupt(); }

   public:   // Contructor | Destructor

      kernel() { _ctor(); }
      virtual ~kernel() { _dtor(); }

   private:   // private Member Functions

      void _allocate_frame()
      {

         

      }

      void _ctor()
      {

         

      }

      void _dtor()
      {


      }

      static void _interupt()
      {


      }

};   // end of class frame

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

} // end of namespace(ev7n)
} // end of namespace(el)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif   // __KERNEL_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////